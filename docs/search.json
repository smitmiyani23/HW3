[
  {
    "objectID": "HW3_Tidyverse.html",
    "href": "HW3_Tidyverse.html",
    "title": "ST558 HW3: Objects, Control Flow and Functions",
    "section": "",
    "text": "Document Details\n\nAuthor: Smit Miyani\n\n\nCollaborators: N/A\n\n\nAssignment: HW3\n\n\nDate: 04JUN24\n\n\nPurpose\nGeneral practice in working with tidyverse and database.\n\n\n\n\n\n\nTasks\n\nTask 1: Conceptual Questions\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nTo do this, we can use ../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nR projects provides an environment for organizing files, managing and integrating with version control systems like git, which enhances productivity and collaboration in development and data analysis.\n\nWhat is git and what is github?\n\nGit is a version control software that can track and modify changes in files and folders within a repository. Github is the online hosting platform for Git-based projects\n\nWhat are the two main differences between a tibble and a data.frame?\n\nThe two main differences between a tibble and a data.frame are:\n\nTibbles only shows the first 10 rows and all columns that fit within the console width. They do not support row names. Data frames, on the other hand, typically print the entire dataset, which can be draining for large datasets.\nSubsetting operations on tibbles are stricter than those on data frames, with case-insensitive column name matching and no default partial matching, reducing the risk of errors. But, data frames, allow for partial matching by default, which can lead to unexpected results.\n\n\nRewrite the following nested function call using baseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length &lt;1.55), Species)\n\niris |&gt;\nas_tibble() |&gt;\nselect(starts_with(\"Petal\"), Species) |&gt;\nfilter(Petal.Length &lt; 1.55) |&gt;\narrange(Species)\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format data: Each row represents a single observation, and each variable has its own column. It’s good for handling repeated measurements or comparisons across different groups.\nWide format data: Each row represents a subject, and variables may have multiple columns representing different categories. It’s useful when each subject has only one observation or when comparing variables across subjects.\n\nFor statistical analysis, we generally prefer long format data because it’s easier to work with, especially for handling many statistical analyses, such as linear models, mixed-effects models, repeated measurements or complex comparisons.\n\n\n\n\nTask 2: Reading Delimited Data\nReading required tidyverse packages:\n\nlibrary(tidyverse)\n\nWarning: package 'tidyr' was built under R version 4.3.1\n\n\nWarning: package 'readr' was built under R version 4.3.1\n\n\nWarning: package 'dplyr' was built under R version 4.3.1\n\n\nWarning: package 'lubridate' was built under R version 4.3.1\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nGlass Data\nReading in the glass data as a tibble from the given url. Based on the url, the data is delimited by , . So read_csv() can be used directly.\n\n#Creating a column names vector\nglass_colnames &lt;- c(\"ID\",\"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type\")\n\n#Reading the data from url\nglass_data &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",col_names = glass_colnames)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): ID, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe  Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0        1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0        1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0        1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0        1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0        1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26     1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0        1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0        1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0        1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11     1\n# ℹ 204 more rows\n\n\nReprocessing the Type column in glass_data with descriptive character strings. The column can be performed using the mutate() function from dplyr . Within mutate, applying case_when , which is a vectorized if_else() operator and works by evaluating each condition sequentially.\n\nglass_data_reprocessed &lt;- glass_data |&gt;\n  mutate(Type = case_when(\n    Type == 1~\"building_windows_float_processed\",\n    Type == 2~\"building_windows_non_float_processed\",\n    Type == 3~\"vehicle_windows_float_processed\",\n    Type == 4~\"vehicle_windows_non_float_processed\",\n    Type == 5~\"containers\",\n    Type == 6~\"tableware\",\n    Type == 7~\"headlamps\"))\n\n#Preview\nglass_data_reprocessed\n\n# A tibble: 214 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type             \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\nReturning filtered subset glass_data_filtered with Fe less than 0.2 and is of type “tableware” or “headlamps” by adding filter() to the chain.\n\nglass_data_filtered &lt;- glass_data |&gt;\n  mutate(Type = case_when(\n    Type == 1~\"building_windows_float_processed\",\n    Type == 2~\"building_windows_non_float_processed\",\n    Type == 3~\"vehicle_windows_float_processed\",\n    Type == 4~\"vehicle_windows_non_float_processed\",\n    Type == 5~\"containers\",\n    Type == 6~\"tableware\",\n    Type == 7~\"headlamps\")) |&gt;\n  filter(Type %in% c(\"tableware\",\"headlamps\"),Fe &lt; 0.2)\nglass_data_filtered\n\n# A tibble: 38 × 11\n      ID    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type     \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware\n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware\n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware\n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware\n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware\n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware\n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware\n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware\n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware\n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps\n# ℹ 28 more rows\n\n\n\n\nYeast Data\nReading in the glass data as a tibble from the given url. Based on the url, the data is delimited by ” ” (double space) . So read_delim() is used.\n\n#Creating a column names vector\nyeast_colnames &lt;- c(\"seq_name\",\"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuk\", \"class\")\n\n#Reading the data from url\nyeast_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",delim = \"  \",col_names = yeast_colnames, show_col_types = TRUE)\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"  \"\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuk\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuk class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nExcluding seq_name and nuk columns from yeast_data using select().\n\n#Selecting columns to exclude using -c()\nyeast_data_filtered &lt;- yeast_data |&gt;\n  select(-c(seq_name,nuk))\nyeast_data_filtered\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\nGrouping the yeast_data by class within the chain and creating new columns using mutate() . Within mutate, applying the mean and median for each numerical variable with across() .\n\nyeast_data_processed &lt;- yeast_data |&gt;\n  select(-c(seq_name,nuk)) |&gt;\n  group_by(class) |&gt;\n  mutate(across(c(mcg, gvh, alm, mit, erl, pox, vac), list(mean = mean, median = median), .names = \"{.fn}_{.col}\"))\nyeast_data_processed\n\n# A tibble: 1,484 × 22\n# Groups:   class [44]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg median_mcg mean_gvh\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.531\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.531\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.531\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.453       0.45    0.458\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.531\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.480       0.48    0.469\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.531\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.453       0.45    0.458\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.531\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.480       0.48    0.469\n# ℹ 1,474 more rows\n# ℹ 11 more variables: median_gvh &lt;dbl&gt;, mean_alm &lt;dbl&gt;, median_alm &lt;dbl&gt;,\n#   mean_mit &lt;dbl&gt;, median_mit &lt;dbl&gt;, mean_erl &lt;dbl&gt;, median_erl &lt;dbl&gt;,\n#   mean_pox &lt;dbl&gt;, median_pox &lt;dbl&gt;, mean_vac &lt;dbl&gt;, median_vac &lt;dbl&gt;\n\n\n\n\n\nTask 3: Combining Excel and Delimited Data\nReading the readxl data and reading the file from local directory\n\nlibrary(readxl)\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\")\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nModifying the variable names using sheet 2 from white-wine.xlsx .\n\nwhite_wine_cols &lt;- read_excel(\"white-wine.xlsx\",sheet = 2)\n\ncolnames(white_wine) &lt;- white_wine_cols$Variables\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAdding a column corresponding to wine type. For this all the observations are “white”\n\nwhite_wine$type &lt;- \"white\"\nwhite_wine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nReading the red wine dataset from ; delimited file using read_delim. Then repacing the original column names with previously modified columnames used in white_wine_cols\n\nred_wine &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\", delim = \";\", col_names = TRUE)\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(red_wine) &lt;- white_wine_cols$Variables\nred_wine\n\n# A tibble: 1,599 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\nAdding a column corresponding to wine type. For this all the observations are “red.”\n\nred_wine$type &lt;- \"red\"\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nJoining red_wine and white_wine to obtain wine_df using bind_rows() .\n\nwine_df &lt;- bind_rows(red_wine,white_wine)\nwine_df\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nFiltering wine_df with quality &gt; 6.5 and alcohol &lt; 132.\n\nwine_df |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132)\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.3            0.65         0               1.2     0.065\n 2           7.8            0.58         0.02            2       0.073\n 3           8.5            0.28         0.56            1.8     0.092\n 4           8.1            0.38         0.28            2.1     0.066\n 5           7.5            0.52         0.16            1.9     0.085\n 6           8              0.59         0.16            1.8     0.065\n 7           5.4            0.835        0.08            1.2     0.046\n 8           9.6            0.32         0.47            1.4     0.056\n 9          12.8            0.3          0.74            2.6     0.095\n10          12.8            0.3          0.74            2.6     0.095\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nSorting the data by quality in descending order using arrange(desc()) .\n\nwine_df |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1          91               0.27        0.45           10.6     0.035\n 2          66               0.36        0.29            1.6     0.021\n 3          74               0.24        0.36            2       0.031\n 4          69               0.36        0.34            4.2     0.018\n 5          71               0.26        0.49            2.2     0.032\n 6           7.9             0.35        0.46            3.6     0.078\n 7          10.3             0.32        0.45            6.4     0.073\n 8           5.6             0.85        0.05            1.4     0.045\n 9          12.6             0.31        0.72            2.2     0.072\n10          11.3             0.62        0.67            5.2     0.086\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\nselecting the columns acid, alcohol, type and quality using select() .\n\nwine_df |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"),c(alcohol, type, quality))\n\n# A tibble: 1,206 × 6\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1          91               0.27        0.45   104   white       9\n 2          66               0.36        0.29   124   white       9\n 3          74               0.24        0.36   125   white       9\n 4          69               0.36        0.34   127   white       9\n 5          71               0.26        0.49   129   white       9\n 6           7.9             0.35        0.46    12.8 red         8\n 7          10.3             0.32        0.45    12.6 red         8\n 8           5.6             0.85        0.05    12.9 red         8\n 9          12.6             0.31        0.72     9.8 red         8\n10          11.3             0.62        0.67    13.4 red         8\n# ℹ 1,196 more rows\n\n\nObtaining mean and standard deviation of alcohol grouped by quality using group_by() and mutate(across()) as used previously.\n\nwine_df |&gt;\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"),c(alcohol, type, quality)) |&gt;\n  group_by(quality) |&gt;\n  mutate(across(alcohol,list(mean = mean,sd = sd),.names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1          91               0.27        0.45   104   white       9        122. \n 2          66               0.36        0.29   124   white       9        122. \n 3          74               0.24        0.36   125   white       9        122. \n 4          69               0.36        0.34   127   white       9        122. \n 5          71               0.26        0.49   129   white       9        122. \n 6           7.9             0.35        0.46    12.8 red         8         94.1\n 7          10.3             0.32        0.45    12.6 red         8         94.1\n 8           5.6             0.85        0.05    12.9 red         8         94.1\n 9          12.6             0.31        0.72     9.8 red         8         94.1\n10          11.3             0.62        0.67    13.4 red         8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_sd &lt;dbl&gt;\n\n\n\n\nTask 4: Database Practice\nReading the necessary packages for database connections.\n\n#Reading the packages\nlibrary(DBI)\n\nWarning: package 'DBI' was built under R version 4.3.1\n\nlibrary(RSQLite)\n\nWarning: package 'RSQLite' was built under R version 4.3.3\n\ncon &lt;- dbConnect(RSQLite::SQLite(), \"lahman.db\")\n\nShowing all the tables in the lahman.db .\n\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\nReturning all data from Teams table using tbl() .\n\ntbl(con,\"Teams\") |&gt;\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [/Users/smit/Documents/ST501 R Scripts and Markdown/HW3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nReturning all data from Teams table using SQL query.\n\ntbl(con, sql(\n\"SELECT *\nFROM `Teams`\nWHERE (`yearID` = 2015)\")\n)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.46.0 [/Users/smit/Documents/ST501 R Scripts and Markdown/HW3/lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;    &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin &lt;chr&gt;, WSWin &lt;chr&gt;, R &lt;int&gt;, AB &lt;int&gt;, H &lt;int&gt;,\n#   X2B &lt;int&gt;, X3B &lt;int&gt;, HR &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;,\n#   HBP &lt;int&gt;, SF &lt;int&gt;, RA &lt;int&gt;, ER &lt;int&gt;, ERA &lt;dbl&gt;, CG &lt;int&gt;, SHO &lt;int&gt;,\n#   SV &lt;int&gt;, IPouts &lt;int&gt;, HA &lt;int&gt;, HRA &lt;int&gt;, BBA &lt;int&gt;, SOA &lt;int&gt;, E &lt;int&gt;,\n#   DP &lt;int&gt;, FP &lt;dbl&gt;, name &lt;chr&gt;, park &lt;chr&gt;, attendance &lt;int&gt;, BPF &lt;int&gt;,\n#   PPF &lt;int&gt;, teamIDBR &lt;chr&gt;, teamIDlahman45 &lt;chr&gt;, teamIDretro &lt;chr&gt;\n\n\nReturning hall of fame players, the nomination year and category from HallOfFame\n\ntbl(con, sql(\n\"SELECT `playerID`, `yearID`, `category`\nFROM `HallOfFame`\nWHERE `inducted` = 'Y'\n\"))\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.46.0 [/Users/smit/Documents/ST501 R Scripts and Markdown/HW3/lahman.db]\n   playerID  yearID category         \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;            \n 1 cobbty01    1936 Player           \n 2 ruthba01    1936 Player           \n 3 wagneho01   1936 Player           \n 4 mathech01   1936 Player           \n 5 johnswa01   1936 Player           \n 6 lajoina01   1937 Player           \n 7 speaktr01   1937 Player           \n 8 youngcy01   1937 Player           \n 9 bulkemo99   1937 Pioneer/Executive\n10 johnsba99   1937 Pioneer/Executive\n# ℹ more rows\n\n\nPerforming inner join using inner_join() by playerID to obtain nameLast and nameFirst for associated inductees. This constructs a table with People in Hall of Fame.\n\ninner_join(tbl(con, sql(\n\"SELECT `playerID`, `yearID`, `category`\nFROM `HallOfFame`\nWHERE `inducted` = 'Y'\n\")),\ntbl(con, sql(\n  \"SELECT `nameFirst`,`nameLast`,`playerID`\n  FROM `People`\n  \")),by = join_by(playerID == playerID)) |&gt;\n  collect()\n\n# A tibble: 338 × 5\n   playerID  yearID category          nameFirst nameLast \n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;    \n 1 cobbty01    1936 Player            Ty        Cobb     \n 2 ruthba01    1936 Player            Babe      Ruth     \n 3 wagneho01   1936 Player            Honus     Wagner   \n 4 mathech01   1936 Player            Christy   Mathewson\n 5 johnswa01   1936 Player            Walter    Johnson  \n 6 lajoina01   1937 Player            Nap       Lajoie   \n 7 speaktr01   1937 Player            Tris      Speaker  \n 8 youngcy01   1937 Player            Cy        Young    \n 9 bulkemo99   1937 Pioneer/Executive Morgan    Bulkeley \n10 johnsba99   1937 Pioneer/Executive Ban       Johnson  \n# ℹ 328 more rows\n\n\nSelecting playerID, G, W and L columns from the Managers. Then grouping the data by playerID, calculates the sum of G, W and L, and storing the results as G_managed, Total_W, and Total_L respectively. This obtains an overall record for playerID with at least one match as a manager. Then creating a new column Win_percent by dividing Total_W by G_managed and arranging in descending order based on it. This constructs a table with Managerial record (at least managed one game)\n\ntbl(con, \"Managers\") |&gt;\n  select(playerID, G,W,L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\nTotal_W = sum(W, na.rm = TRUE),\nTotal_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(\n    Win_percent = Total_W/G_managed) |&gt;\n  arrange(desc(Win_percent))\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L Win_percent\n   &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;       &lt;dbl&gt;\n 1 bensove01         1       1       0           1\n 2 burwebi01         1       1       0           1\n 3 cohenan01         1       1       0           1\n 4 ebeldi99          3       3       0           1\n 5 falkbi01          1       1       0           1\n 6 hardeme01         3       3       0           1\n 7 simmote01         1       1       0           1\n 8 steinte01         2       2       0           1\n 9 sukefcl01         2       2       0           1\n10 tamarjo01         1       1       0           1\n# ℹ 739 more rows\n\n\nPerforming inner join on newly created hall of fame people with managerial record table to yield a table that shows hall of fame inductees with at least 1 game as a manager under their belt. This includes their personal and managerial record as well.\n\ninner_join(\n  inner_join(tbl(con, sql(\n\"SELECT `playerID`, `yearID`, `category`\nFROM `HallOfFame`\nWHERE `inducted` = 'Y'\n\")),\ntbl(con, sql(\n  \"SELECT `nameFirst`,`nameLast`,`playerID`\n  FROM `People`\n  \")),by = join_by(playerID == playerID)) |&gt;\n  collect(),\ntbl(con, \"Managers\") |&gt;\n  select(playerID, G,W,L) |&gt;\n  group_by(playerID) |&gt;\n  summarize(G_managed = sum(G, na.rm = TRUE),\nTotal_W = sum(W, na.rm = TRUE),\nTotal_L = sum(L, na.rm = TRUE)) |&gt;\n  collect() |&gt;\n  mutate(\n    Win_percent = Total_W/G_managed) |&gt;\n  arrange(desc(Win_percent)),by = join_by(playerID == playerID)) |&gt;\n  collect() |&gt;\n  arrange(desc(Win_percent))\n\n# A tibble: 97 × 9\n   playerID  yearID category        nameFirst nameLast G_managed Total_W Total_L\n   &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;     &lt;chr&gt;        &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1 simmote01   2020 Player          Ted       Simmons          1       1       0\n 2 wrighge01   1937 Pioneer/Execut… George    Wright          85      59      25\n 3 spaldal01   1939 Pioneer/Execut… Al        Spalding       126      78      47\n 4 mccarjo99   1957 Manager         Joe       McCarthy      3487    2125    1333\n 5 comisch01   1939 Pioneer/Execut… Charlie   Comiskey      1410     840     541\n 6 southbi01   2008 Manager         Billy     Southwo…      1770    1044     704\n 7 seleefr99   1999 Manager         Frank     Selee         2180    1284     862\n 8 chancfr01   1946 Player          Frank     Chance        1622     946     648\n 9 weaveea99   1996 Manager         Earl      Weaver        2541    1480    1060\n10 lopezal01   1977 Manager         Al        Lopez         2425    1410    1004\n# ℹ 87 more rows\n# ℹ 1 more variable: Win_percent &lt;dbl&gt;"
  }
]